* lsp-ts-plugin-manager

Improves on [[https://github.com/emacs-lsp/lsp-mode/][lsp-mode]]'s built-in support for TypeScript plugins (=lsp-clients-typescript-plugins=) with automatic installation—either as a dependency of a particular language server or with a `completing-read' prompt—and conditional activation depending on workspace information.
** Motivation
I wanted something like this specifically to enable better DX for Svelte in Emacs. lsp-mode has a client for Svelte, but without the TypeScript plugin (which enables finding references to symbols from JS/TS files in .svelte files), Svelte support was incomplete. TypeScript plugins can be enabled manually through =lsp-clients-typescript-plugins=, but I wanted something that could do it automatically.

VSCode exposes a similar capability to plugins (automatic TypeScript language plugins), so
my hope is that this module will help even the playing field a bit for Emacs. I've tested this with =typescript-svelte-plugin= (enables better support for Svelte, as mentioned above) and =typescript-styled-plugin= (enables better support for CSS autocomplete/hover docs with =styled-components= for React)

** Setup
*** Register a plugin
Plugins are registered using the =lsp-ts-plugin-manager-register= function, in conjunction with the =lsp-ts-plugin-manager-plugin= constructor

Example for =typescript-styled-plugin= for styled components:
#+begin_src elisp
(lsp-ts-plugin-manager-register
   (lsp-ts-plugin-manager-plugin
    :name 'typescript-styled-plugin ;; plugin name. acts as an identifier
    :activation-fn #'project-has-styled-components-p ;; function that returns non-nil if plugin should be activated
    :package "typescript-styled-plugin")) ;; npm package name
#+end_src

Plugins can be installed automatically along with another lsp-mode dependency. Here's an example that automatically installs =typescript-svelte-plugin= when =svelte-language-server= is installed with lsp-mode:
#+begin_src elisp
(lsp-ts-plugin-manager-register
   (lsp-ts-plugin-manager-plugin
    :name 'typescript-svelte-plugin
    :activation-fn #'svelte-project-p
    :package "typescript-svelte-plugin"
    :dependency-of 'svelte-language-server))
#+end_src

*NOTE*: =lsp-mode= should be loaded before plugins are registered
*** Utilities
**** =lsp-ts-plugin-manager-package-json-has-dependency-p=
This function can be used to check the current workspace's package.json for a dependency. It may be helpful for writing a plugin definition's =activation-fn=.

The keyword argument can be a symbol or a list of symbols for entries to check in the top-level of the current workspace's package.json

Example:
#+begin_src elisp
(defun svelte-project-p (workspace-root)
  "Determines whether the `svelte' package is present in the package.json file in the
WORKSPACE-ROOT."
  (lsp-ts-plugin-manager-package-json-has-dependency-p workspace-root 'svelte :in 'devDependencies))

(lsp-ts-plugin-manager-register
   (lsp-ts-plugin-manager-plugin
    :name 'typescript-svelte-plugin
    :activation-fn #'svelte-project-p
    :package "typescript-svelte-plugin"
    :dependency-of 'svelte-language-server))
#+end_src
** Caveats
- I've only tested this with my personal DOOM Emacs configuration. I can't guarantee it'll work with your configuration or that it won't break with future version of lsp-mode. Open to PRs!
- An instance of =lsp-ts-plugin-manager-downloaded-package= can be passed into =lsp-ts-plugin-manager-plugin='s =:package= slot class whose purpose is to enable installation of typescript plugins that are not directly installable through npm. No guarantees that it works.
